Mappings: 
  attributes: 
    project: 
      name: Redis-streaming-demo
  OpenSearch: 
    domain:
      name: redis-demo

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.192.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join ['-', [!FindInMap [attributes,project, name], 'vpc']]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['-', [!FindInMap [attributes,project, name], 'internet-gateway']]

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.192.10.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ['-', [!FindInMap [attributes,project, name], 'public-subnet-1']]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 10.192.11.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ['-', [!FindInMap [attributes,project, name], 'public-subnet-2']]

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: 10.192.20.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ['-', [!FindInMap [attributes,project, name], 'private-subnet-1']]

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 10.192.21.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ['-', [!FindInMap [attributes,project, name], 'private-subnet-2']]

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!FindInMap [attributes,project, name], 'public-route-table']]

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!FindInMap [attributes,project, name], 'private-route-table-1']]

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!FindInMap [attributes,project, name], 'private-route-table-2']]

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  ElastiCacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Elasticache Security Group
      VpcId:  !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '6379'
        ToPort: '6379'
        CidrIp: 0.0.0.0/0
  ElastiCacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: ElastiCache Subnet Group
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
  ElasticacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      AutoMinorVersionUpgrade: 'true'
      CacheNodeType: cache.t2.micro
      CacheSubnetGroupName:
        Ref: ElastiCacheSubnetGroup
      ClusterName: redis-demo-elasticache
      Engine: redis
      NumCacheNodes: '1'
      VpcSecurityGroupIds:
      - Fn::GetAtt:
        - ElastiCacheSecurityGroup
        - GroupId
  
  OpenSearchDomain:
    Type: "AWS::OpenSearchService::Domain"
    Properties:
      AccessPolicies:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: "*"
          Action: es:*
          Resource: !Join 
            - ':'
            - - 'arn:aws:es' 
              - !Ref 'AWS::Region'
              - '*'
              - !Join ['/', ['domain', !FindInMap [OpenSearch, domain, name] , '*']]
          Condition: 
            IpAddress: 
              aws:SourceIp: 0.0.0.0/0
      AdvancedSecurityOptions:
        Enabled: True
        InternalUserDatabaseEnabled: True
        MasterUserOptions:
          MasterUserName: redis-test
          MasterUserPassword: Redis-@-test-1
      ClusterConfig:
        InstanceCount: 1
        InstanceType: "t3.small.search"
        ZoneAwarenessEnabled: false
      DomainEndpointOptions: 
        EnforceHTTPS: true
      DomainName: !FindInMap 
        - OpenSearch
        - domain
        - name
      EngineVersion: "OpenSearch_1.1"
      EncryptionAtRestOptions:
        Enabled: true
      LogPublishingOptions:
        SEARCH_SLOW_LOGS:
          Enabled: false
        ES_APPLICATION_LOGS:
          Enabled: false
        INDEX_SLOW_LOGS:
          Enabled: false
        AUDIT_LOGS:
          Enabled: false
      NodeToNodeEncryptionOptions:
        Enabled: true
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10

  RedisDemoLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: RedisDemoLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonVPCFullAccess
        - arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess

Outputs:
  OpenSearchDomainEndpoint:
    Description: Open Search domain endpoint for the Lambda clients
    Value: !GetAtt [OpenSearchDomain, DomainEndpoint]
    Export:
      Name: !Join ['-', [!FindInMap [attributes,project, name], 'open-search-endpoint']] 
  ElastiCacheRedisEndpoint:
    Description: Redis primary endpoint for the Lambda clients
    Value: !GetAtt [ElasticacheCluster, RedisEndpoint.Address]
    Export:
      Name: !Join ['-', [!FindInMap [attributes,project, name], 'elasticache-endpoint']] 
  MainVpcEndpoint:
    Description: Endpoint of the main VPC
    Value: !GetAtt [VPC, VpcId]
    Export: 
      Name: !Join ['-', [!FindInMap [attributes,project, name], 'vpc-id']] 
  PrivateSubnet1Endpoint:
    Description: Private subnetid 1
    Value: !GetAtt [PrivateSubnet1, SubnetId]
    Export:
      Name: !Join ['-', [!FindInMap [attributes,project, name], 'private-subnet-1-id']]  
  PrivateSubnet2Endpoint:
    Description: Private subnetid 2
    Value: !GetAtt [PrivateSubnet2, SubnetId]
    Export:
      Name: !Join ['-', [!FindInMap [attributes,project, name], 'private-subnet-2-id']] 
      